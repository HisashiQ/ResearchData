[
  {
    "user": "U0EUVFRBJ",
    "text": "any kotlin/java experts out there able to shed some light on this question? <http://stackoverflow.com/questions/34762029/getting-incompatible-types-error-when-using-code-generated-from-a-kotlin-data>",
    "attachments": [
      {
        "title": "Getting \"Incompatible types\" error when using code generated from a Kotlin data class",
        "title_link": "http://stackoverflow.com/questions/34762029/getting-incompatible-types-error-when-using-code-generated-from-a-kotlin-data",
        "text": "If I decompile the .class file generated by data class State(val b: List&lt;Array&lt;Int&gt;&gt;) then I get the following Java code: public final class State { private final List&lt;? extends",
        "fallback": "Getting \"Incompatible types\" error when using code generated from a Kotlin data class",
        "thumb_url": "http://cdn.sstatic.net/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded&a",
        "from_url": "http://stackoverflow.com/questions/34762029/getting-incompatible-types-error-when-using-code-generated-from-a-kotlin-data",
        "thumb_width": 316,
        "thumb_height": 316,
        "id": 1
      }
    ],
    "ts": "1452675427.000299",
    "id": "13ko525",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U08MQ0F8V",
    "text": "Anyone read/seen/written a guide to Kotlin with Retrofit?",
    "ts": "1452696885.000301",
    "id": "13ko526",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U08MQ0F8V",
    "text": "I was hoping I'd be able to use lambas in place of Callback&lt;T&gt; objects.",
    "ts": "1452696947.000302",
    "id": "13ko527",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U08MQ0F8V",
    "text": "But apparently not",
    "ts": "1452696959.000303",
    "id": "13ko528",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U08MQ0F8V",
    "text": "If nobody knows of any good resources, I could have a go at writing one up myself",
    "ts": "1452697009.000304",
    "id": "13ko529",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0546QERR",
    "text": "<@U08MQ0F8V> what do you mean? if you have a method in your service that takes a `Callback` i'm sure you could define it inline with a lambda",
    "ts": "1452702465.000305",
    "id": "13ko530",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U08MQ0F8V",
    "text": "<@U0546QERR>:  that’s what I assumed as well, unless I’m doing it totally wrong",
    "ts": "1452702563.000306",
    "id": "13ko531",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U08MQ0F8V",
    "text": "e.g. if i do",
    "edited": {
      "user": "U08MQ0F8V",
      "ts": "1452702632.000000"
    },
    "ts": "1452702619.000307",
    "id": "13ko532",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U08MQ0F8V",
    "text": "``` var request = service.doThing(someParam)```",
    "ts": "1452702661.000309",
    "id": "13ko533",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U08MQ0F8V",
    "text": "```request.clone().enqueue( Callback&lt;Response&gt; needed here)```",
    "ts": "1452702716.000310",
    "id": "13ko534",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0546QERR",
    "text": "ah hmm, Callback has two methods in its interface",
    "ts": "1452702781.000311",
    "id": "13ko535",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U08MQ0F8V",
    "text": "which I ended up doing the Kotlin anon class way using \n```object : Callback&lt;MyResponse&gt; { \n    override fun onResponse(response: Response&lt;MyResponse&gt;?, retrofit: Retrofit?) { \n        doStuffWithResponse(response) \n    } \n    override fun onFailure(t: Throwable?){ \n        doOnError() \n    } \n}```",
    "edited": {
      "user": "U08MQ0F8V",
      "ts": "1452703002.000000"
    },
    "ts": "1452702877.000312",
    "id": "13ko536",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0546QERR",
    "text": "i haven't used retrofit with kotlin yet but if an interface has two methods i don't think you can lambda it",
    "ts": "1452703078.000317",
    "id": "13ko537",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0546QERR",
    "text": "if you use the rxjava call adapter then you can get back `Observable` from your service which would let you define callbacks with lambdas",
    "ts": "1452703113.000318",
    "id": "13ko538",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U08MQ0F8V",
    "text": "d’oh, now that you’ve said that it seems blindingly obvious...",
    "ts": "1452703135.000319",
    "id": "13ko539",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U08MQ0F8V",
    "text": "would be cool if `enqueue()` accepted a lambda per callback",
    "ts": "1452703185.000320",
    "id": "13ko540",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0546QERR",
    "text": "yeah like `enqueue(OnSuccess&lt;T&gt;, OnFailure&lt;Throwable&gt;)`",
    "ts": "1452703212.000321",
    "id": "13ko541",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U08MQ0F8V",
    "text": "exactly",
    "ts": "1452703220.000322",
    "id": "13ko542",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U08MQ0F8V",
    "text": "&lt;thinks about building Kotlin wrapper for Retrofit…&gt;",
    "ts": "1452703297.000323",
    "id": "13ko543",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U053LEHJN",
    "text": "well you could just add an extension method to the class in your project",
    "ts": "1452703347.000324",
    "id": "13ko544",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U08MQ0F8V",
    "text": "<@U053LEHJN>: good point",
    "ts": "1452703372.000325",
    "id": "13ko545",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0546QERR",
    "text": "my rule of thumb is usually\n1) code without lambdas\n2) does IDE highlight it in yellow?\nyes - alt-enter-enter\nno - oh well",
    "ts": "1452703477.000326",
    "id": "13ko546",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U08MQ0F8V",
    "text": "```fun &lt;T&gt; Call&lt;T&gt;.enqueue(onSuccess: (Response&lt;T&gt;?, Retrofit?) -&gt; Unit, onFailure: (Throwable?) -&gt; Unit) {\n        this.enqueue(object : Callback&lt;T&gt; {\n            override fun onResponse(response: Response&lt;T&gt;?, retrofit: Retrofit?) {\n                onSuccess(response, retrofit)\n            }\n            override fun onFailure(t: Throwable?) {\n                onFailure(t)\n            }\n        })\n    }```",
    "edited": {
      "user": "U08MQ0F8V",
      "ts": "1452704509.000000"
    },
    "ts": "1452704461.000327",
    "reactions": [
      {
        "name": "+1",
        "users": [
          "U0B9TKCRL"
        ],
        "count": 1
      }
    ],
    "id": "13ko547",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U08MQ0F8V",
    "text": "for anyone interested, that worked...",
    "ts": "1452704754.000330",
    "id": "13ko548",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0546QERR",
    "text": "gangster",
    "ts": "1452704967.000331",
    "id": "13ko549",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0HP9QXR7",
    "text": "<@U08MQ0F8V>:  Is there a way to get rid of some of the nullable types? Response&lt;&gt; for instance will never be null (although the body might be). Also, I believe Jake Warton did some Kotlin extension functions/kotlin bindings for Retrofit that you can find on github I believe.",
    "ts": "1452705650.000332",
    "id": "13ko550",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U08MQ0F8V",
    "text": "<@U0HP9QXR7>: sure, if `response` is never null, then we can accept non-nullables in the definition. The interface of `Callback&lt;T&gt;` defines the methods as taking nullables though, so have to force unwrap there",
    "ts": "1452706265.000333",
    "id": "13ko551",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U08MQ0F8V",
    "text": "```    fun &lt;T&gt; Call&lt;T&gt;.enqueue(onSuccess: (Response&lt;T&gt;, Retrofit) -&gt; Unit, onFailure: (Throwable?) -&gt; Unit) {\n        this.enqueue(object : Callback&lt;T&gt; {\n            override fun onResponse(response: Response&lt;T&gt;?, retrofit: Retrofit?) {\n                onSuccess(response!!, retrofit!!)\n            }\n            override fun onFailure(t: Throwable?) {\n                onFailure(t)\n            }\n        })\n    }```",
    "edited": {
      "user": "U08MQ0F8V",
      "ts": "1452706301.000000"
    },
    "ts": "1452706275.000334",
    "reactions": [
      {
        "name": "+1",
        "users": [
          "U0HP9QXR7",
          "U0B9TKCRL"
        ],
        "count": 2
      }
    ],
    "id": "13ko552",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U08MQ0F8V",
    "text": "This makes the calling code a lot cleaner :simple_smile:",
    "ts": "1452706394.000337",
    "id": "13ko553",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U08MQ0F8V",
    "text": "```request.clone().enqueue(\n               onSuccess =  { response : Response&lt;MyResponse&gt;, retrofit : Retrofit -&gt; doStuffWithResponse(response) },\n               onFailure =  { t : Throwable? -&gt; println(t) }\n        )```\nedit: added param names to make it clearer",
    "edited": {
      "user": "U08MQ0F8V",
      "ts": "1452706537.000000"
    },
    "ts": "1452706428.000338",
    "id": "13ko554",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U08MQ0F8V",
    "text": "<@U0HP9QXR7>: can’t find Kotlin Retrofit bindings, got a link?",
    "ts": "1452706638.000342",
    "id": "13ko555",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0HP9QXR7",
    "text": "I thought I remember seeing it, but I can’t seem to find it. Perhaps he said he was working on it? It was some kind of wrapper with extension function magic, maybe it was just in a talk.. Can’t seem to find where I saw it.",
    "ts": "1452706854.000343",
    "id": "13ko556",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  }
]