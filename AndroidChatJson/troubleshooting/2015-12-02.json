[
  {
    "user": "U0DC95VCP",
    "text": "I feel like I’m just all over this group :simple_smile: I’m running int so many eeks this week. So new one…we have an ongoing issue with the Turkish language, mainly around the “i” and “I” stuff. I have code that takes a uri and then converts it into a base32 hash. This is how we name our folders so we can locate various documents. In all other languages it works fine, but if the uri contains an uppercase “i” (I) and the current locale is Turkish, then the hash is completely different thereby leading to a folder not found issue. I’ve tried playing using String.format(locale….) to force the format of the uri into <http://Locale.US|Locale.US> (since we don’t want any localization here at all anyway), but that doesn’t make a difference…the hash is still fubared. Is there a way to set the Locale for a module or even class? I don’t want to change the default locale since the device and app are still in Turkish, but I don’t want anything but <http://Locale.US|Locale.US> used for most of the backend storage stuff…. any ideas?",
    "ts": "1449076784.000188",
    "id": "02tr3157",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U055GGAHS",
    "text": "why not just base64 the raw bytes of the URI",
    "ts": "1449077630.000189",
    "id": "02tr3158",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0DC95VCP",
    "text": "hrm…well currently we first normalize the uri…pushing it to all lowercase and trimming any whitespace. Then we encode it in utf8, then we hash it with Sha1 returning it’s bytes, that we takes those bytes and encode is to a Base32 String….whew. Sorry… this is not my code so I’m trying to follow it myself.",
    "ts": "1449077917.000190",
    "id": "02tr3159",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U055GGAHS",
    "text": "okay then step back.. what is the source of the uri?",
    "ts": "1449077995.000191",
    "id": "02tr3160",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U055GGAHS",
    "text": "like could you just fix this entire problem by using UUID instead",
    "ts": "1449078008.000192",
    "id": "02tr3161",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0DC95VCP",
    "text": "ideally yes, and I’m in the process of rewriting the app from scratch and I’ve already spec’d it out to use a UUID instead, but, the current app is a commercial app with tons of users…so changing how we access files that already exist would be a bad thing",
    "ts": "1449078080.000193",
    "id": "02tr3162",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0DC95VCP",
    "text": "the uri is what’s generated by our backend servers. Basically this app creates content dynamically — allowing users to create apps in a studio app, then push it to devices and instantly have a completely different app. This is a marketing product - so think slide shows with all the functionality of mobile gestures and whatnot. Cool stuff, very complex. Anyway - the uri is what the server creates for the file, then we download the file, hash the URI to create a folder/file structure…and any access requires that uri.",
    "ts": "1449078192.000194",
    "id": "02tr3163",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U055GGAHS",
    "text": "can you just modify the uri generation endpoint to like &lt;previousname&gt;LanguageFix that uses UUID instead and in the update it tries to rename from previous URI to a new uuid",
    "ts": "1449078263.000195",
    "id": "02tr3164",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0DC95VCP",
    "text": "Surely, but it probably wouldn’t be worth it. The current code is solid in that it works fine for the most part, but it’s a tinker toy tower (hence the rewrite). It may just get logged as a known issue for now since this issue with Turkish “i” has been a known issue for the product for a couple years now…it’s just the first time we’ve ran into this specific scenario with it. I was just hoping there would be an easy way to force a locale for a specific segment of code. For the rewrite I’ll just offload everything to a separate thread set with <http://Locale.US|Locale.US>. Unless someone here has better ideas.",
    "ts": "1449078841.000196",
    "id": "02tr3165",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0DC95VCP",
    "text": "thanks <@U055GGAHS> for all the ideas :simple_smile:",
    "ts": "1449079561.000197",
    "id": "02tr3166",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U055GGAHS",
    "text": "sure",
    "ts": "1449079575.000198",
    "id": "02tr3167",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0DC95VCP",
    "text": "For anyone interested…I found a super simple fix. Turns out there’s a wonkiness to String.toLowerCase() when it comes to the Turkish character set. Changing to String.toLowerCase(Locale.ENGLISH) fixed the issue entirely :simple_smile:",
    "ts": "1449088629.000199",
    "id": "02tr3168",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U055GGAHS",
    "text": "oh nice",
    "ts": "1449088653.000200",
    "id": "02tr3169",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U061HDV96",
    "text": "I have a list of objects and that specific object has a Boolean (class because of new API version) field/attr. I debug my app and in the list it says the value is true, but when I loop over it, it's false?",
    "edited": {
      "user": "U061HDV96",
      "ts": "1449095790.000000"
    },
    "ts": "1449095775.000201",
    "id": "02tr3170",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U055GGAHS",
    "text": "Make it final?",
    "ts": "1449096388.000203",
    "id": "02tr3171",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U061HDV96",
    "text": "<@U055GGAHS>: it's never written to",
    "ts": "1449097833.000204",
    "id": "02tr3172",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U061HDV96",
    "text": "But I'm just gonna try Kotlin first, I might know why it's happening",
    "edited": {
      "user": "U061HDV96",
      "ts": "1449097938.000000"
    },
    "ts": "1449097934.000205",
    "id": "02tr3173",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  }
]