[
  {
    "user": "U2PUVU09L",
    "text": "guys, does anyone know any good tutorials on unit testing?",
    "ts": "1478621422.000052",
    "id": "08te2585",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U08GFT5V5",
    "text": "<@U2PUVU09L> Start a new java project",
    "ts": "1478622932.000053",
    "id": "08te2586",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U08GFT5V5",
    "text": "look for junit tutorials",
    "ts": "1478622939.000054",
    "id": "08te2587",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U08GFT5V5",
    "text": "it's not that complicated",
    "ts": "1478622951.000055",
    "id": "08te2588",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U08GFT5V5",
    "text": "<https://technologyconversations.com/2013/12/24/test-driven-development-tdd-best-practices-using-java-examples-2/>",
    "attachments": [
      {
        "service_name": "Technology Conversations",
        "service_url": "http://technologyconversations.com",
        "title": "Test Driven Development (TDD): Best Practices Using JavaÂ Examples",
        "title_link": "https://technologyconversations.com/2013/12/24/test-driven-development-tdd-best-practices-using-java-examples-2/",
        "author_name": "Viktor Farcic",
        "author_link": "https://technologyconversations.com/author/technologyconversations/",
        "thumb_url": "https://i2.wp.com/technologyconversations.files.wordpress.com/2013/12/tddbestpracticespackages1.png?fit=200%2C150",
        "thumb_width": 200,
        "thumb_height": 149,
        "text": "In the previous article Test Driven Development (TDD): Example&nbsp;Walkthrough an example of TDD was given. It went from writing first test and its implementation to having a set of requirements fully tested and developed. Now it&rsquo;s time to learn what the best TDD practices are. This article will be built on examples from the previous one.\nBest practices are solutions to a set of problems under certain situations. Not following them would make us &ldquo;reinvent the wheel&rdquo; and struggle with the same problems already solved by others. On the other hand, best practices should not be followed blindly. They should be tried out. With an informed decision at hand, they can be adopted as they are, modified to serve better specific situation or fully discarded.\nSome of the best practices described here are inherited from other sets of practices and used when doing TDD. For example, most (if not all) unit testing practices should be used when doing TDD.\nArticle source code\nSource code for all examples can be found in the github repository . Implementation is in the source directory src/main/java and tests can be found in src/test/java. Both are located in the package com.wordpress.technologyconversations.tddbestpractices. Code is written in Java and uses JUnit as the testing framework.\nTDD life-cycle\nBefore explaining best practices, it is important to understand the TDD life-cycle.\nWrite the test\nRun the test (there is no implementation code, test does not pass)\nWrite just enough implementation code to make the test pass\nRun all tests (tests pass)\nRefactor\nRepeat\nTest-driven development is not about testing. Test-driven development is about development (and design), specifically improving the quality and design of code. The resulting unit tests are just an extremely useful by-product.\nFor more information, please read the Test-Driven Development (TDD) article.\nTDD Best practices\nPractices have been separated into following categories:\nNaming Conventions\nProcesses\nDevelopment practices\nTools\nNaming Conventions\nNaming conventions help organize tests better so that it is easier for developers to find what they&rsquo;re looking for. Another benefit is that many tools expect that those conventions are followed. There are many naming conventions in use and those presented here are just a drop in the sea. The logic is that any naming convention is better than none. Most important is that everyone on the team knows what conventions are used and is comfortable with them. Choosing &ldquo;more popular&rdquo; conventions has the advantage that newcomers to the team can get up to speed fast since they can leverage existing knowledge to find their way around.\nSeparate the implementation from the test code\nBenefits: avoids accidentally packaging tests together with production binaries; many build tools expect tests to be in a certain source directory.\nCommon practice is to have at least two source directories. Implementation code should be located in src/main/java and test code in src/test/java. In bigger projects number of source directories can increase but the separation between implementation and tests should remain.\nBuild tools like Maven and Gradle expect source directories separation as well as naming conventions.\n[GRADLE: build.gradle]\n\napply plugin: 'java'\n\nrepositories {\nmavenCentral()\n}\n\ndependencies {\ntestCompile group: 'junit', name: 'junit', version: '4.11'\n}\n\nThe build.gradle can be found in the GitHub TechnologyConversations repository.\n[COMMAND PROMPT]\n\ngradle test jar\n\nYou&rsquo;ll notice that we are not specifying what to test nor what classes to use to create a jar file. Gradle assumes that tests are in src/test/java and that the implementation code that should be packaged to the jar file is in src/main/java.\nPlace test classes in the same package as implementation\nBenefits: helps finding tests.\nKnowing that tests are in the same package as the code they test helps finding them faster. For example, examples in this article are in the package com.wordpress.technologyconversations.tddbestpractices. As stated in the previous practice, even though packages are the same, classes are in the separate source directories.\nName test classes in a similar fashion as classes they test\nBenefits: helps finding tests.\nOne commonly used practice is to name tests the same as implementation classes with suffix Test. If, for example, implementation class is StringCalculator, test class should be StringCalculatorTest.\nOften, number of lines in test classes is bigger than number of lines in corresponding implementation class. There can be many test methods for each implementation method. To help locate methods that are tested, test classes can be split. For example, if StringCalculator has methods add and remove, there can be test classes StringCalculatorAddTest and StringCalculatorRemoveTest.\nUse descriptive names for test methods\nBenefits: helps understanding the objective of tests.\nUsing method names that describe tests is beneficial when trying to figure out why some test failed or when the coverage should be increased with more tests. It should be clear what conditions are set before the test, what actions are performed and what is the expected outcome.\nThere are many different ways to name test methods. Our prefered method is to name them using the Given/When/Then syntax used in BDD scenarios. Given describes (pre)conditions, When describes actions and Then describes the expected outcome. If some test does not have preconditions (usually set using @Before and @BeforeClass annotations), Given can be skipped.\nAn example of BDD format for naming test methods would be:\n\n@Test\npublic final void whenSemicolonDelimiterIsSpecifiedThenItIsUsedToSeparateNumbers() {\nAssert.assertEquals(3+6+15, StringCalculator.add(\"//;n3;6;15\"));\n}\n\nThe whole class can be found in the GitHub TechnologyConversations repository.\nDo NOT rely only on comments to provide information about test objective. Comments do not appear when tests are executed from your favorite IDE nor do they appear in reports generated by CI or build tools.\nIn the example screenshot, both failed tests have the same code inside. The only difference is in the name of the method. Test1 does not give much info regarding the failure. Method name whenSemicolonDelimiterIsSpecifiedThenItIsUsedToSeparateNumbers is much more descriptive and provides information even without going deeper into the log or the test code.\nProcesses\nTDD processes are the core set of practices. Successful implementation of TDD depends on practices described in this section.\nWrite the test before writing the implementation code\nBenefits: ensures that testable code is written; ensures that every line of code gets tests written for it.\nBy writing or modifying test first, developer is focused on requirements before starting to work on a code. This is the main difference when compared to writing tests after the implementation is done. Additional benefit is that with tests first we are avoiding the danger that tests work as quality checking instead of quality assurance.\nOnly write new code when test is failing\nBenefits: confirms that the test does not work without the implementation\nIf tests are passing without the need to write or modify the implementation code then either the functionality is already implemented or test is defective. If new functionality is indeed missing then test always passes and is therefore useless. Test should fail for the expected reason. Even though there are no guarantees that test is verifying the right thing, with fail first and for the expected reason, confidence that verification is correct should be high.\nRerun all tests every time implementation code changes\nBenefits: ensures that there is no unexpected side-effect caused by code changes.\nEvery time any part of the implementation code changes, all tests should be run. Ideally, tests are fast to execute and can be run by developer locally. Once code is submitted to veâ¦",
        "fallback": "Technology Conversations Link: Test Driven Development (TDD): Best Practices Using Java&nbsp;Examples",
        "from_url": "https://technologyconversations.com/2013/12/24/test-driven-development-tdd-best-practices-using-java-examples-2/",
        "service_icon": "https://s0.wp.com/i/webclip.png",
        "id": 1
      }
    ],
    "ts": "1478622971.000056",
    "reactions": [
      {
        "name": "downvote",
        "users": [
          "U0N7D6F50"
        ],
        "count": 1
      },
      {
        "name": "upvote",
        "users": [
          "U0N7D6F50",
          "U2ZNN76JV"
        ],
        "count": 2
      }
    ],
    "id": "08te2589",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U2PUVU09L",
    "text": "<@U08GFT5V5> Thanks",
    "ts": "1478623059.000058",
    "id": "08te2590",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  }
]