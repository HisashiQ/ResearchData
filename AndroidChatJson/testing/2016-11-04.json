[
  {
    "user": "U2XDD1EC8",
    "text": "<@U2XDD1EC8|idealife> has joined the channel",
    "subtype": "channel_join",
    "ts": "1478243380.000030",
    "id": "04te2566",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0K1ALDQE",
    "text": "<@U053LEHJN> how about unmock?",
    "ts": "1478254839.000031",
    "id": "04te2567",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0K1ALDQE",
    "text": "<https://github.com/bjoernQ/unmock-plugin>",
    "attachments": [
      {
        "service_name": "GitHub",
        "title": "bjoernQ/unmock-plugin",
        "title_link": "https://github.com/bjoernQ/unmock-plugin",
        "text": "unmock-plugin - Gradle plugin to be used in combination with the new unit testing feature of the Gradle Plugin / Android Studio to use real classes for e.g. SparseArray.",
        "fallback": "GitHub: bjoernQ/unmock-plugin",
        "thumb_url": "https://avatars2.githubusercontent.com/u/5682593?v=3&s=400",
        "from_url": "https://github.com/bjoernQ/unmock-plugin",
        "thumb_width": 139,
        "thumb_height": 139,
        "service_icon": "https://github.com/apple-touch-icon.png",
        "id": 1
      }
    ],
    "ts": "1478254856.000032",
    "reactions": [
      {
        "name": "downvote",
        "users": [
          "U0N7D6F50"
        ],
        "count": 1
      },
      {
        "name": "upvote",
        "users": [
          "U0N7D6F50"
        ],
        "count": 1
      }
    ],
    "id": "04te2568",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U09T8SFG8",
    "text": "<@U0K1ALDQE> so if I understand correctly, it uses real Android classes instead of the stubs provided? So kind of a simpler Robolectric?",
    "ts": "1478255116.000034",
    "id": "04te2569",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0K1ALDQE",
    "text": "Yes, and I’m not sure if I should compare it to Robolectric",
    "ts": "1478255152.000035",
    "id": "04te2570",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0K1ALDQE",
    "text": "It’s just uses the real Android classes instead of the stubs. So you can unit test building of Intents, Bundle, StringUtil, ...",
    "ts": "1478255180.000036",
    "id": "04te2571",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0K1ALDQE",
    "text": "Without the need of any mocking. But testing something that does actual native stuff like drawing on a Canvas is still not possible of course.",
    "ts": "1478255207.000037",
    "id": "04te2572",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0K1ALDQE",
    "text": "But it helps you to unit test a lot more with a lot less hassle.",
    "ts": "1478255222.000038",
    "id": "04te2573",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U09T8SFG8",
    "text": "but robolectric does the same no? You select a jar (android version) and it gives you implemented classes from that jar",
    "edited": {
      "user": "U09T8SFG8",
      "ts": "1478255294.000000"
    },
    "ts": "1478255289.000039",
    "id": "04te2574",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0K1ALDQE",
    "text": "True, but beside that it does a lot of other funky stuff. And you need to use RobolectricRunner etc. It’s been a long time since I used Robolectric and I don’t have a lot of experience with it.",
    "ts": "1478255792.000041",
    "id": "04te2575",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0K1ALDQE",
    "text": "Unmock just simply unmocks the classes I want to use the real implementation of. And it saves me a lot of hassle and mocking effort.",
    "ts": "1478255834.000042",
    "id": "04te2576",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0K1ALDQE",
    "text": "I still rely heavily on Mockito and DI. But in a case you’d want to test something like what was asked above. Unmock is definitely a good way to go imo.",
    "ts": "1478255885.000043",
    "id": "04te2577",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  }
]