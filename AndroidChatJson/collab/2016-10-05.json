[
  {
    "user": "U053LEHJN",
    "text": "<@U08GFT5V5> <@U04TK850N> so how can I use rkt with all of these Docker-centric platforms?",
    "ts": "1475678539.000390",
    "id": "05co5179",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U053LEHJN",
    "text": "I know rkt supports Docker images, but I'd like to use the standard container format if possible",
    "ts": "1475678551.000391",
    "id": "05co5180",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U08GFT5V5",
    "text": "Never tried that",
    "ts": "1475678568.000392",
    "id": "05co5181",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U053LEHJN",
    "text": "<@U08GFT5V5> and do you have a base OS image in your containers or do you keep things pretty bare?",
    "ts": "1475678720.000393",
    "id": "05co5182",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U08GFT5V5",
    "text": "alpine linux",
    "ts": "1475678730.000394",
    "id": "05co5183",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U08GFT5V5",
    "text": "build from there",
    "ts": "1475678735.000395",
    "id": "05co5184",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U08GFT5V5",
    "text": "30mb for the entire linux archive",
    "ts": "1475678746.000396",
    "id": "05co5185",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U08GFT5V5",
    "text": "for comparison, <@U0N7D6F50> is 35mb",
    "ts": "1475678755.000397",
    "id": "05co5186",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U04U5KS3Z",
    "text": "anyone tried kubernetes?",
    "ts": "1475678913.000398",
    "id": "05co5187",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U053LEHJN",
    "text": "<@U04U5KS3Z> been looking into it",
    "ts": "1475679105.000399",
    "id": "05co5188",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U053LEHJN",
    "text": "<@U08GFT5V5> I figured I'd go with CoreOS",
    "ts": "1475679115.000400",
    "id": "05co5189",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U08GFT5V5",
    "text": "It depends on what you want in the archive",
    "ts": "1475679130.000401",
    "id": "05co5190",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U08GFT5V5",
    "text": "it’s the same a picking a deployment VM",
    "ts": "1475679139.000402",
    "id": "05co5191",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U053LEHJN",
    "text": "<@U08GFT5V5> can you deploy a container within the host os?",
    "ts": "1475696783.000403",
    "id": "05co5192",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U053LEHJN",
    "text": "like, can I basically use it like a special zip file?",
    "ts": "1475696794.000404",
    "id": "05co5193",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U08GFT5V5",
    "text": "What do you mean?",
    "ts": "1475697244.000405",
    "id": "05co5194",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U08GFT5V5",
    "text": "You want portable docker?",
    "ts": "1475697262.000406",
    "id": "05co5195",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U053LEHJN",
    "text": "<@U08GFT5V5> not docker, no",
    "ts": "1475697275.000407",
    "id": "05co5196",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U053LEHJN",
    "text": "<@U08GFT5V5> example: I want to update my Android SDK and tools via a container",
    "ts": "1475697298.000408",
    "id": "05co5197",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U061HDV96",
    "text": "<@U08GFT5V5> idea for the GitHub bot: for the attachment use the color of the most often used language",
    "ts": "1475702531.000409",
    "id": "05co5198",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U061HDV96",
    "text": "Not sure if you can find those colors somewhere",
    "ts": "1475702545.000410",
    "id": "05co5199",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U08GFT5V5",
    "text": "<@U061HDV96> i’m working on that right now",
    "ts": "1475702563.000411",
    "id": "05co5200",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U061HDV96",
    "text": "Sweet",
    "ts": "1475702574.000412",
    "id": "05co5201",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U08GFT5V5",
    "text": "<@U053LEHJN> Look at how eclipse che does it",
    "ts": "1475702575.000413",
    "id": "05co5202",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U08GFT5V5",
    "text": "they’ve figured out what you are trying to do",
    "ts": "1475702590.000414",
    "id": "05co5203",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U08GFT5V5",
    "text": "<https://github.com/google/shipshape>",
    "attachments": [
      {
        "service_name": "GitHub",
        "title": "google/shipshape",
        "title_link": "https://github.com/google/shipshape",
        "text": "shipshape - Program analysis platform",
        "fallback": "GitHub: google/shipshape",
        "thumb_url": "https://avatars2.githubusercontent.com/u/1342004?v=3&s=400",
        "from_url": "https://github.com/google/shipshape",
        "thumb_width": 400,
        "thumb_height": 400,
        "service_icon": "https://github.com/apple-touch-icon.png",
        "id": 1
      }
    ],
    "ts": "1475710980.000415",
    "reactions": [
      {
        "name": "upvote",
        "users": [
          "U0N7D6F50"
        ],
        "count": 1
      },
      {
        "name": "downvote",
        "users": [
          "U0N7D6F50"
        ],
        "count": 1
      }
    ],
    "id": "05co5204",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0N7D6F50",
    "text": "",
    "bot_id": "B0N7DNUT0",
    "attachments": [
      {
        "fallback": "google/shipshape",
        "text": "&lt;!--\n// Copyright 2015 Google Inc. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n--&gt;\n\n# Overview of Shipshape #\n\n[![Build Status](<https://travis-ci.org/google/shipshape.svg?branch=master>)](<https://travis-ci.org/google/shipshape>)\n\nShipshape is a static program analysis platform that allows custom analyzers to\nplug in through a common interface. Shipshape is packaged in a docker image.\nWhen that image is run, a Shipshape analyzer service starts up and processes\nanalysis requests. Structured analysis results are generated. Shipshape can be\nrun as a command-line interface, or as a Jenkins plugin. The requirements to run\nare that you are running Linux with docker installed and the source code you want\nto analyze available on disk.\n\nThe source code for Shipshape is located in the \"shipshape\" directory.\nThird-party libraries used by Shipshape are all in the \"third_party\" directory.\n\n## Download and Run Shipshape\n\nShipshape has been tested on Ubuntu (&gt;=14.04) and Debian unstable, but should work on other Linux distributions.\n\nShipshape requires [Docker](<https://docs.docker.com/docker/userguide/>) to run.\n\n[Install instructions for Linux](shipshape/docs/linux-setup.md).\n\n[Install instructions for GCE](shipshape/docs/gce-setup.md).\n\nOnce you've installed it, running is easy!\n\n    $ shipshape &lt;Directory&gt;\n\nFor examples for how to use it, [see our documentation](shipshape/docs/run-cli.md).\n\n### Building from source\n\nShipshape uses the [Bazel build tool](<http://bazel.io/docs/install.html>). Once you have Docker and Bazel installed, you can build Shipshape with:\n\n    $ ./configure\n    $ bazel build //...\n\nThe binary will be saved in `bazel-bin/shipshape/cli/shipshape`.\n\n## Analyzers\n\nThe following analyzers are bundled with Shipshape:\n\n* [go vet](<https://godoc.org/github.com/golang/go/src/cmd/vet>)\n* [JSHint](<http://www.jshint.com/>)\n* [PyLint](<http://www.pylint.org/> )\n* [Error Prone](<https://github.com/google/error-prone>) (category: `ErrorProne`) ***[Under construction: [Issue #104](<https://github.com/google/shipshape/issues/104>)]***\n\n### Contributed analyzers\n\nThe following analyzers were contributed by external developers:\n\n* [AndroidLint](<http://tools.android.com/tips/lint>). Image: `<http://gcr.io/shipshape_releases/android_lint:prod|gcr.io/shipshape_releases/android_lint:prod>`\n* [CTADetector](<http://mir.cs.illinois.edu/~yulin2/CTADetector>) - Yu Lin (University of Illinois at Urbana-Champaign). Image: `yulin2/ctadetector`\n* [ExtendJ](<https://github.com/google/simplecfg>) - Jesper Öqvist (Lund University). Image: `joqvist/extendj_shipshape`\n\n### Add a new analyzer\n\nSee our [documentation](shipshape/docs/add-an-analyzer.md) on how to create more analyzers of your own.\nWe also have [a complete example](shipshape/androidlint_analyzer/README.md).\n\n## Contributing to shipshape\n\nTo contribute to shipshape, first [read our contribution guidelines](CONTRIBUTING.md) and then\nmake sure you can [build and run shipshape from source](shipshape/docs/dev-setup.md).\n\n## Running the Jenkins Plugin #\n\nInstructions are located in `shipshape/jenkins_plugin/README.md`.\n\n## Package Structure of Shipshape #\n\n**analyzers** -- implementation for several simple analyzers run by the\n  go_dispatcher. The canonical simplest analyzer is in analyzers/postmessage\n\n**androidlint_analyzer** -- implementation for AndroidLint packaged as a complete\n  Shipshape analyzer service, using libraries from the service package\n\n**api** -- go API used by analyzers running under the go_dispatcher\n\n**cli** -- code for the CLI that pulls down a Shipshape service, starts it running\n  on a specified directory, and outputs analysis results\n\n**docker** -- Dockerfiles for the various docker packages produced by Shipshape\n\n**java** -- code for a javac dispatcher analyzer service that runs analyzers that\n  build off of javac\n\n**jenkins_plugin** -- code for the jenkins plugin that runs Shipshape\n\n**proto** -- the protocol buffer APIs for writing new analyzers. Shipshape analyzers\n  are services that implement the rpcs listed in the ShipshapeService interface\n  in proto/shipshape_rpc.proto. Analyzers produce structured output in the form\n  of Note messages, defined in proto/note.proto\n\n**service** -- core Shipshape code.\n  go_dispatcher -- dispatching Shipshape analyzer service for the go language.\n    calls out to analyzers in the analyzer package.\n  shipshape -- main shipshape service loop\n  driver -- controller for calling out to all passed in analyzer services\n    (including the go_dispatcher and the javac_analyzer)\n  config -- processes .shipshape config files to determine which analyzers run\n\n**test** -- manual integration tests to simplify the process of running Shipshape\n  locally on test input, useful when developing new analyzer services\n\n**util** -- various go utilities that simplify Shipshape code, e.g. for working with\n  slices, execing docker commands, or writing tests\n",
        "title": "google/shipshape",
        "id": 1,
        "title_link": "https://github.com/google/shipshape",
        "color": "FFFFFF",
        "fields": [
          {
            "title": "Open issues",
            "value": "43",
            "short": true
          },
          {
            "title": "Languages",
            "value": "Java, Shell, JavaScript, Go, HTML, Protocol Buffer, Python",
            "short": true
          },
          {
            "title": "Contributors",
            "value": "14",
            "short": true
          },
          {
            "title": "License",
            "value": "Apache License 2.0",
            "short": true
          },
          {
            "title": "Commits",
            "value": "688",
            "short": true
          },
          {
            "title": "Releases",
            "value": "0",
            "short": true
          },
          {
            "title": "Branches",
            "value": "13",
            "short": true
          }
        ],
        "mrkdwn_in": [
          "title",
          "text"
        ]
      }
    ],
    "ts": "1475716299.000417",
    "id": "05co5205",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  }
]