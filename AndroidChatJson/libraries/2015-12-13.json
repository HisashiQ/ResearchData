[
  {
    "user": "U0B8R3VV4",
    "text": "varargs with generics is not supposed to be super happy, or probably some java arcanery I don't know/remrmbery about. It's a pattern I have seen it before.",
    "edited": {
      "user": "U0B8R3VV4",
      "ts": "1450002267.000000"
    },
    "ts": "1450001662.000355",
    "id": "13li2927",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "<https://github.com/ReactiveX/RxJava/blob/1.x/src/main/java/rx/Observable.java#L1426>",
    "attachments": [
      {
        "service_name": "GitHub",
        "title": "ReactiveX/RxJava",
        "title_link": "https://github.com/ReactiveX/RxJava/blob/1.x/src/main/java/rx/Observable.java#L1426",
        "text": "RxJava – Reactive Extensions for the JVM – a library for composing asynchronous and event-based programs using observable sequences for the Java VM.",
        "fallback": "GitHub: ReactiveX/RxJava",
        "thumb_url": "https://avatars3.githubusercontent.com/u/6407041?v=3&s=400",
        "from_url": "https://github.com/ReactiveX/RxJava/blob/1.x/src/main/java/rx/Observable.java#L1426",
        "thumb_width": 400,
        "thumb_height": 400,
        "id": 1
      }
    ],
    "ts": "1450001663.000356",
    "id": "13li2928",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "<https://github.com/ReactiveX/RxJava/blob/1.x/src/main/java/rx/Observable.java#L1714>",
    "attachments": [
      {
        "service_name": "GitHub",
        "title": "ReactiveX/RxJava",
        "title_link": "https://github.com/ReactiveX/RxJava/blob/1.x/src/main/java/rx/Observable.java#L1714",
        "text": "RxJava – Reactive Extensions for the JVM – a library for composing asynchronous and event-based programs using observable sequences for the Java VM.",
        "fallback": "GitHub: ReactiveX/RxJava",
        "thumb_url": "https://avatars3.githubusercontent.com/u/6407041?v=3&s=400",
        "from_url": "https://github.com/ReactiveX/RxJava/blob/1.x/src/main/java/rx/Observable.java#L1714",
        "thumb_width": 400,
        "thumb_height": 400,
        "id": 1
      }
    ],
    "ts": "1450001749.000358",
    "id": "13li2929",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "they'd rather have finite versions, and fall back to iterable or whatever for other cases",
    "ts": "1450001794.000360",
    "id": "13li2930",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "Okay, that's not a good example, I need to find one",
    "ts": "1450002313.000363",
    "id": "13li2931",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "now, about costs, doOnNext costs two object allocations + operations: <https://github.com/ReactiveX/RxJava/blob/1.x/src/main/java/rx/Observable.java#L4496>",
    "attachments": [
      {
        "service_name": "GitHub",
        "title": "ReactiveX/RxJava",
        "title_link": "https://github.com/ReactiveX/RxJava/blob/1.x/src/main/java/rx/Observable.java#L4496",
        "text": "RxJava – Reactive Extensions for the JVM – a library for composing asynchronous and event-based programs using observable sequences for the Java VM.",
        "fallback": "GitHub: ReactiveX/RxJava",
        "thumb_url": "https://avatars3.githubusercontent.com/u/6407041?v=3&s=400",
        "from_url": "https://github.com/ReactiveX/RxJava/blob/1.x/src/main/java/rx/Observable.java#L4496",
        "thumb_width": 400,
        "thumb_height": 400,
        "id": 1
      }
    ],
    "edited": {
      "user": "U0B8R3VV4",
      "ts": "1450003805.000000"
    },
    "ts": "1450003282.000364",
    "id": "13li2932",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "plus a couple more from the lift <https://github.com/ReactiveX/RxJava/blob/1.x/src/main/java/rx/Observable.java#L153>",
    "attachments": [
      {
        "service_name": "GitHub",
        "title": "ReactiveX/RxJava",
        "title_link": "https://github.com/ReactiveX/RxJava/blob/1.x/src/main/java/rx/Observable.java#L153",
        "text": "RxJava – Reactive Extensions for the JVM – a library for composing asynchronous and event-based programs using observable sequences for the Java VM.",
        "fallback": "GitHub: ReactiveX/RxJava",
        "thumb_url": "https://avatars3.githubusercontent.com/u/6407041?v=3&s=400",
        "from_url": "https://github.com/ReactiveX/RxJava/blob/1.x/src/main/java/rx/Observable.java#L153",
        "thumb_width": 400,
        "thumb_height": 400,
        "id": 1
      }
    ],
    "ts": "1450003340.000366",
    "id": "13li2933",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "plus all of these <https://github.com/ReactiveX/RxJava/blob/563fc3fdf6778068f99ca03ea9cea80899162f30/src/main/java/rx/internal/operators/OperatorDoOnEach.java>",
    "attachments": [
      {
        "service_name": "GitHub",
        "title": "ReactiveX/RxJava",
        "title_link": "https://github.com/ReactiveX/RxJava/blob/563fc3fdf6778068f99ca03ea9cea80899162f30/src/main/java/rx/internal/operators/OperatorDoOnEach.java",
        "text": "RxJava – Reactive Extensions for the JVM – a library for composing asynchronous and event-based programs using observable sequences for the Java VM.",
        "fallback": "GitHub: ReactiveX/RxJava",
        "thumb_url": "https://avatars3.githubusercontent.com/u/6407041?v=3&s=400",
        "from_url": "https://github.com/ReactiveX/RxJava/blob/563fc3fdf6778068f99ca03ea9cea80899162f30/src/main/java/rx/internal/operators/OperatorDoOnEach.java",
        "thumb_width": 400,
        "thumb_height": 400,
        "id": 1
      }
    ],
    "ts": "1450003396.000368",
    "id": "13li2934",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "I'd rather compose a function from 3-4 functions, which is a common FP pattern, and call that once",
    "edited": {
      "user": "U0B8R3VV4",
      "ts": "1450003546.000000"
    },
    "ts": "1450003444.000370",
    "id": "13li2935",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "of course the thing is not transactional, some may throw and return early etc, but that's on the library user to have uncaught exceptions on blocks that are supposed to be side-effecty but safe",
    "edited": {
      "user": "U0B8R3VV4",
      "ts": "1450003537.000000"
    },
    "ts": "1450003526.000371",
    "id": "13li2936",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "Three points",
    "edited": {
      "user": "U0543MFFP",
      "ts": "1450014637.000000"
    },
    "ts": "1450014615.000376",
    "id": "13li2937",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "1. You can't count the object allocations in the first doOnNext + lift since you're already doing that anyways",
    "ts": "1450014641.000378",
    "id": "13li2938",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "2. You're allocating an object per Action0, Action1, etc. which wouldn't be necessary if you just inlined it.",
    "ts": "1450014657.000379",
    "id": "13li2939",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "3. Are we really arguing about a handful of allocations",
    "ts": "1450014664.000380",
    "id": "13li2940",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "These aren't even allocations that happen each emission, they're allocations that happen once per *setup* of the sequence.",
    "ts": "1450014696.000381",
    "id": "13li2941",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "3. handful of innecessary allocations on setup and *operations run for every element*",
    "edited": {
      "user": "U0B8R3VV4",
      "ts": "1450017155.000000"
    },
    "ts": "1450017028.000382",
    "id": "13li2942",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "premature optimization etc, I have some use cases, it works, makes for less code and marginally faster execution paths, it's not harmful, I don't get why you don't get it",
    "edited": {
      "user": "U0B8R3VV4",
      "ts": "1450017354.000000"
    },
    "ts": "1450017057.000383",
    "id": "13li2943",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "I doubt it's even an optimization because you're still having to invoke a bunch of `call()` methods.",
    "ts": "1450022257.000390",
    "id": "13li2944",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "Whereas inlining could skip that.",
    "ts": "1450022267.000391",
    "id": "13li2945",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "That's fine, you can use that lib if you want, I just think it's pointless.",
    "ts": "1450022294.000392",
    "id": "13li2946",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "I doubt you could show me a noticeable performance gain and I think it's less readable.",
    "ts": "1450022307.000393",
    "id": "13li2947",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "the call methods are done either way, except in one they're part of a lift + DoOnEachOperator path",
    "ts": "1450023679.000394",
    "id": "13li2948",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "which adds several intermediate steps",
    "ts": "1450023690.000395",
    "id": "13li2949",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "and having a way of doing  ```let f = a . b . c``` and call with f as a parameter is just plainly nice",
    "edited": {
      "user": "U0B8R3VV4",
      "ts": "1450023797.000000"
    },
    "ts": "1450023769.000396",
    "id": "13li2950",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "I think you're expecting too much from it in terms of performance, and completely ignore the reusability part, but agree to disagree",
    "edited": {
      "user": "U0B8R3VV4",
      "ts": "1450024001.000000"
    },
    "ts": "1450023771.000397",
    "id": "13li2951",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "I'm not ignoring reusability.",
    "ts": "1450025432.000402",
    "id": "13li2952",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "I said you can wrap things yourself... manually, if you ever need it.",
    "ts": "1450025446.000403",
    "id": "13li2953",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "Or, like, call a method.",
    "ts": "1450025454.000404",
    "id": "13li2954",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "Your `let` doesn't make any sense though.",
    "ts": "1450025477.000405",
    "id": "13li2955",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "You're composing `c` of `b` of `a`, right? But that means that the domain of `c` is the codomain of `b`, which is the codomain of `a`",
    "ts": "1450025500.000406",
    "id": "13li2956",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "But actually you're not inputting the results of `c` to `b` nor `a`.",
    "ts": "1450025516.000407",
    "id": "13li2957",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "It's not function composition.",
    "edited": {
      "user": "U0543MFFP",
      "ts": "1450025636.000000"
    },
    "ts": "1450025520.000408",
    "id": "13li2958",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "It's imperative.",
    "ts": "1450025567.000409",
    "id": "13li2959",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "(I'm assuming you're using Haskell above, maybe you didn't mean it that way.)",
    "edited": {
      "user": "U0543MFFP",
      "ts": "1450025674.000000"
    },
    "ts": "1450025621.000410",
    "id": "13li2960",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "it is imperative",
    "ts": "1450025725.000414",
    "id": "13li2961",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "it has to be imperative",
    "ts": "1450025736.000415",
    "id": "13li2962",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "that's what we're wrapping",
    "ts": "1450025741.000416",
    "id": "13li2963",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "subtype": "file_share",
    "text": "<@U0B8R3VV4|pakoito> uploaded a file: <https://androidchat.slack.com/files/pakoito/F0GGU28A2/-.txt|Untitled>",
    "file": {
      "id": "F0GGU28A2",
      "created": 1450025775,
      "timestamp": 1450025775,
      "name": "-.txt",
      "title": "Untitled",
      "mimetype": "text/plain",
      "filetype": "text",
      "pretty_type": "Plain Text",
      "user": "U0B8R3VV4",
      "editable": true,
      "size": 706,
      "mode": "snippet",
      "is_external": false,
      "external_type": "",
      "is_public": true,
      "public_url_shared": false,
      "display_as_bot": false,
      "username": "",
      "url_private": "https://files.slack.com/files-pri/T04PLNDMP-F0GGU28A2/-.txt?t=xoxe-4802761737-135492341906-135492342354-a21523d532",
      "url_private_download": "https://files.slack.com/files-pri/T04PLNDMP-F0GGU28A2/download/-.txt?t=xoxe-4802761737-135492341906-135492342354-a21523d532",
      "permalink": "https://androidchat.slack.com/files/pakoito/F0GGU28A2/-.txt",
      "permalink_public": "https://slack-files.com/T04PLNDMP-F0GGU28A2-c4b3b3d7f1",
      "edit_link": "https://androidchat.slack.com/files/pakoito/F0GGU28A2/-.txt/edit",
      "preview": ".doOnNext(value -> {\r\n    doA(value);\r\n    doB(value);\r\n    doC(value);\r\n    doD(value);\r",
      "preview_highlight": "<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text/plain',window.getSelection().toString().replace(/\\u200b/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre>.doOnNext(value -&gt; {</pre></div>\n<div><pre>    doA(value);</pre></div>\n<div><pre>    doB(value);</pre></div>\n<div><pre>    doC(value);</pre></div>\n<div><pre>    doD(value);</pre></div>\n<div><pre></pre></div>\n</div>\n</div>\n",
      "lines": 37,
      "lines_more": 32,
      "preview_is_truncated": false,
      "channels": [
        "C054ZUY2W"
      ],
      "groups": [

      ],
      "ims": [

      ],
      "comments_count": 0
    },
    "user": "U0B8R3VV4",
    "upload": true,
    "display_as_bot": false,
    "username": "<@U0B8R3VV4|pakoito>",
    "bot_id": null,
    "ts": "1450025775.000417",
    "id": "13li2964",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "Even in your SongKick example you linked above you're not re-using it.",
    "ts": "1450025778.000418",
    "id": "13li2965",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "You're creating a new `RxActions.multiple` each time.",
    "ts": "1450025811.000419",
    "id": "13li2966",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "`doOnNext(doTheThing())`",
    "ts": "1450025827.000420",
    "id": "13li2967",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "```\nvoid doTheThing() {\n  doA(); doB(); doC();\n}\n```",
    "edited": {
      "user": "U0543MFFP",
      "ts": "1450025845.000000"
    },
    "ts": "1450025834.000421",
    "id": "13li2968",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "Bam, no RxActions needed.",
    "ts": "1450025852.000423",
    "id": "13li2969",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "read the snippet above please",
    "ts": "1450025895.000424",
    "id": "13li2970",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "and don't cherrypick one sample app from 3 months ago with something I put out yesterday",
    "ts": "1450025916.000425",
    "id": "13li2971",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "I did.",
    "ts": "1450025917.000426",
    "id": "13li2972",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "WTf",
    "ts": "1450025921.000427",
    "id": "13li2973",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "You're the one that linked it",
    "ts": "1450025923.000428",
    "id": "13li2974",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "no, no, i mean read",
    "ts": "1450025923.000429",
    "id": "13li2975",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "I'm not cherry picking, you are!",
    "ts": "1450025931.000430",
    "id": "13li2976",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "I'm done.",
    "ts": "1450025931.000431",
    "id": "13li2977",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "but you can reuse it",
    "ts": "1450025994.000432",
    "id": "13li2978",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "it's a pattern",
    "ts": "1450026002.000433",
    "id": "13li2979",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "you can have it repeated across your code fifty times, or just once",
    "ts": "1450026017.000434",
    "id": "13li2980",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "If you're going to link your own code (see: <https://androidchat.slack.com/archives/libraries/p1449980541000347>) then say I'm cherry-picking because I directly address it then you're not interested in a fair discussion.",
    "attachments": [
      {
        "color": "4D394B",
        "from_url": "https://androidchat.slack.com/archives/libraries/p1449980541000347",
        "fallback": "[December 12th, 2015 8:22 PM] pakoito: <https://github.com/pakoito/SongkickInterview/blob/master/app/src/main/java/com/pacoworks/dereference/screens/songkickdetails/SongkickDetailsPresenter.java#L104>",
        "author_subname": "pakoito",
        "ts": "1449980541.000347",
        "text": "<https://github.com/pakoito/SongkickInterview/blob/master/app/src/main/java/com/pacoworks/dereference/screens/songkickdetails/SongkickDetailsPresenter.java#L104>",
        "title": "pakoito/SongkickInterview",
        "title_link": "https://github.com/pakoito/SongkickInterview/blob/master/app/src/main/java/com/pacoworks/dereference/screens/songkickdetails/SongkickDetailsPresenter.java#L104",
        "author_link": "https://androidchat.slack.com/team/pakoito",
        "author_icon": "https://secure.gravatar.com/avatar/b5ab42cbb595d2267cb2eaa050ec58c5.jpg?s=48&d=https%3A%2F%2Fslack.global.ssl.fastly.net%2F66f9%2Fimg%2Favatars%2Fava_0014-48.png",
        "mrkdwn_in": [
          "text"
        ],
        "id": 1
      }
    ],
    "ts": "1450026057.000435",
    "id": "13li2981",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "So like I said - I'm done.",
    "ts": "1450026060.000437",
    "id": "13li2982",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "yes, your point is that I didn't make a field out of it, so the library is pointless",
    "edited": {
      "user": "U0B8R3VV4",
      "ts": "1450026162.000000"
    },
    "ts": "1450026081.000438",
    "id": "13li2983",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "I can do a PR, add it, and now your point is moot",
    "ts": "1450026088.000439",
    "id": "13li2984",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "give me 2 minutes",
    "ts": "1450026100.000440",
    "id": "13li2985",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "done",
    "ts": "1450026376.000442",
    "id": "13li2986",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "should I need that snippet in another place in the presenter, I can use it instead of creating another lambda",
    "ts": "1450026395.000443",
    "id": "13li2987",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "now think about a library that adds a logging statement + any combination of Action1",
    "ts": "1450026426.000444",
    "id": "13li2988",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "you can write a lambda through the app in multiple places, or you can create a method to compose the action1 of logging you don't care about with whatever text that you want, and another action",
    "edited": {
      "user": "U0B8R3VV4",
      "ts": "1450026532.000000"
    },
    "ts": "1450026474.000445",
    "id": "13li2989",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "so when you call your subscribe, several imperative methods are called sequentially, imperatively, but they're lazily defined",
    "ts": "1450026501.000446",
    "id": "13li2990",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "you would say that you can write that method manually for every new case that you have through the codebase, so you're just repiting the same pattern over and over just because",
    "ts": "1450026690.000448",
    "id": "13li2991",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "still done?",
    "ts": "1450027284.000449",
    "id": "13li2992",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U091EBYSU",
    "text": "Functional composition of multiple functions calls is nice, <@U0B8R3VV4> though we don't have much side effects in our Rx chains I think we'll use it just for applying multiple functions to same values via one call because we already depend a lot on `Action` &amp; `Func` interfaces family from RxJava in our code ",
    "ts": "1450033834.000450",
    "id": "13li2993",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U053LEHJN",
    "text": "Kotlin comes in handy in the above cases, as it's able to easily inline lambdas to replace what you'd use Action* objects for",
    "ts": "1450039153.000451",
    "id": "13li2994",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0CT7JDN3",
    "text": "I was going through a library and saw this in the dependencies \n` provided 'com.squareup.okhttp:okhttp:2.4.0’`",
    "ts": "1450070323.000452",
    "id": "13li2995",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0CT7JDN3",
    "text": "What does this mean ?",
    "ts": "1450070328.000453",
    "id": "13li2996",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U091EBYSU",
    "text": "<@U0CT7JDN3>: Means that dependency is not actually compiled, but **probably** will be found in runtime",
    "ts": "1450073075.000454",
    "id": "13li2997",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0CT7JDN3",
    "text": "Hmm. I am developing a library and want to use third party library like this. So should it be compile or provided ?",
    "ts": "1450073136.000455",
    "id": "13li2998",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0GHJTKUY",
    "subtype": "channel_join",
    "text": "<@U0GHJTKUY|andig> has joined the channel",
    "ts": "1450074728.000456",
    "id": "13li2999",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U091EBYSU",
    "text": "<@U0CT7JDN3> if you need dependency to be present at runtime then use `compile`, if dependency is optional for your library then use `provided`",
    "ts": "1450074809.000457",
    "reactions": [
      {
        "name": "+1",
        "users": [
          "U0CT7JDN3"
        ],
        "count": 1
      }
    ],
    "id": "13li3000",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  }
]