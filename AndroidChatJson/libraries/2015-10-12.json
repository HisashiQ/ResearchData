[
  {
    "user": "U091EBYSU",
    "text": "Yo there: those of you who use RxBindings, what do you think about mutability of `CharSequence` emitted by the `RxTextView.textChanges()`?",
    "ts": "1444687224.000266",
    "reactions": [
      {
        "name": "+1",
        "users": [
          "U091EBYSU",
          "U0B8R3VV4",
          "U0548MM6B"
        ],
        "count": 3
      },
      {
        "name": "-1",
        "users": [
          "U091EBYSU"
        ],
        "count": 1
      },
      {
        "name": "turtle",
        "users": [
          "U0B93TK6J",
          "U091EBYSU",
          "U0548MM6B"
        ],
        "count": 3
      }
    ],
    "id": "12li1934",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "I don't know about what you exactly mean about the mutability",
    "ts": "1444689790.000267",
    "id": "12li1935",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "but the app sample I put out last week uses it and it was just okay",
    "ts": "1444689809.000268",
    "id": "12li1936",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U091EBYSU",
    "text": "`CharSequence` emitted by the `TextView` on text change is actually mutable and if text changes, your instance of `CharSequence` will be changed because it’s same object",
    "ts": "1444689857.000269",
    "id": "12li1937",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "oh",
    "ts": "1444689863.000270",
    "id": "12li1938",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "neato",
    "ts": "1444689865.000271",
    "id": "12li1939",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "MVVM right?",
    "ts": "1444689874.000272",
    "id": "12li1940",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U091EBYSU",
    "text": "oh yes, didn’t know that too.",
    "ts": "1444689879.000273",
    "id": "12li1941",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "still, I'll consider it as immutable regardless",
    "ts": "1444689893.000274",
    "id": "12li1942",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U091EBYSU",
    "text": "<https://github.com/JakeWharton/RxBinding/issues/124>",
    "attachments": [
      {
        "service_name": "GitHub",
        "title": "RxTextView.textChanges emits mutable CharSequence · Issue #124 · JakeWharton/RxBinding · GitHub",
        "title_link": "https://github.com/JakeWharton/RxBinding/issues/124",
        "text": "RxTextView.textChanges(searchEditText) .delay(2, TimeUnit.SECONDS) .subscrite( ret -&gt; {} ) I bind the text changes event with a edittext widget. When I ...",
        "fallback": "GitHub: RxTextView.textChanges emits mutable CharSequence · Issue #124 · JakeWharton/RxBinding",
        "thumb_url": "https://avatars3.githubusercontent.com/u/454498?v=3&s=400",
        "from_url": "https://github.com/JakeWharton/RxBinding/issues/124",
        "thumb_width": 297,
        "thumb_height": 297,
        "id": 1
      }
    ],
    "ts": "1444689898.000275",
    "id": "12li1943",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "you're pushing agenda here but I'm actually for your proposal",
    "ts": "1444689986.000277",
    "id": "12li1944",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "let's +1 with the correct account",
    "edited": {
      "user": "U0B8R3VV4",
      "ts": "1444690268.000000"
    },
    "ts": "1444690014.000278",
    "id": "12li1945",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U091EBYSU",
    "text": "ah, my mistake. Sorry for not being clean enough in my thoughts.",
    "ts": "1444690054.000279",
    "id": "12li1946",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U091EBYSU",
    "text": "Jake will be very angry because of `+1` comments :simple_smile: Don’t do it, I warned you :simple_smile:",
    "ts": "1444690119.000280",
    "id": "12li1947",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "improved",
    "ts": "1444690194.000281",
    "id": "12li1948",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U091EBYSU",
    "text": "oh lol :laughing:",
    "ts": "1444690226.000282",
    "id": "12li1949",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0548MM6B",
    "text": "I agree with you",
    "ts": "1444690234.000283",
    "id": "12li1950",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0548MM6B",
    "text": "don’t use RxBinding tho… yet",
    "ts": "1444690242.000284",
    "id": "12li1951",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0546QERR",
    "text": "is there much difference between the rxbinding operator and the WidgetObservable in rxandroid?",
    "ts": "1444690294.000286",
    "id": "12li1952",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "it's the evolution",
    "ts": "1444690303.000287",
    "id": "12li1953",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "WidgetObservable got deprecated",
    "ts": "1444690309.000288",
    "id": "12li1954",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U091EBYSU",
    "text": "ReVolution :simple_smile:",
    "ts": "1444690314.000289",
    "id": "12li1955",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "and RxAndroid split into libraries",
    "ts": "1444690319.000290",
    "id": "12li1956",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "RxAndroid is the Scheduler, RxBinding the WidgetObservable, and FrameworkObservables",
    "ts": "1444690339.000291",
    "id": "12li1957",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0546QERR",
    "text": "ah, good to know. just started using that the other day, will look into jake’s lib",
    "ts": "1444690340.000292",
    "id": "12li1958",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "and someone got RxLifecycle, which deals with activity/fragment binding but nobody really uses because the api is meh",
    "edited": {
      "user": "U0B8R3VV4",
      "ts": "1444690379.000000"
    },
    "ts": "1444690359.000293",
    "id": "12li1959",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0546QERR",
    "text": "i actually had a hell of a time getting debounce to work but maybe rxbindings is easier",
    "ts": "1444690385.000295",
    "id": "12li1960",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "I haven't gotten debounce and distinctUntil to work together",
    "ts": "1444690418.000296",
    "id": "12li1961",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "anyway shameless plug I put an RxBinding app out last friday",
    "ts": "1444690434.000297",
    "id": "12li1962",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "<https://github.com/pakoito/SongkickInterview>",
    "edited": {
      "user": "U0B8R3VV4",
      "ts": "1444690450.000000"
    },
    "ts": "1444690445.000298",
    "id": "12li1963",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U091EBYSU",
    "text": "Someone with RxLifecycle is <@U0543MFFP> :simple_smile:",
    "ts": "1444690453.000301",
    "id": "12li1964",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0546QERR",
    "text": "been meaning to study that :stuck_out_tongue:",
    "ts": "1444690456.000302",
    "id": "12li1965",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "it just does what it says on the tin",
    "ts": "1444690561.000303",
    "id": "12li1966",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "the difficult bit is expressing your business logic in functional fashion",
    "edited": {
      "user": "U0B8R3VV4",
      "ts": "1444690605.000000"
    },
    "ts": "1444690581.000304",
    "id": "12li1967",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U091EBYSU",
    "text": "I can share my thoughts/experience on this if you want",
    "ts": "1444690618.000306",
    "id": "12li1968",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "I want",
    "ts": "1444690633.000307",
    "id": "12li1969",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "men you're quoting Dostoyevsky there",
    "ts": "1444691010.000308",
    "id": "12li1970",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U091EBYSU",
    "text": "Okay: we’ve two different implementations of Rx handling for UI changes in the app.\n\nWe use MVP.\n\nOne of the most “feature-full\" screen of the app has such architecture when `Fragment` (View in MVP) has `public Observable&lt;UiEvent&gt; uiEvents()` and `Presenter` subscribes to it in the `onBindView()` and then reacts on different types of `UiEvents`, does it’s job asynchronously and then notifies the `View` in BG thread (because we think that `MainThread` is part of `View` implementation details). And I truly love this scheme for such complex screen.\n\nOther screens/parts_of_ui that built with MVP (switching to MVP is still in progress, app is huge) notifies `Presenters` in exact public methods and don’t provide `Observable&lt;UiEvent&gt;`, I’d say that for pretty small (in terms of features) UIs this approach works fine too.",
    "edited": {
      "user": "U091EBYSU",
      "ts": "1444691419.000000"
    },
    "ts": "1444691026.000309",
    "id": "12li1971",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "you should take a look at the stuff I posted above",
    "ts": "1444691100.000310",
    "id": "12li1972",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "I have my own activity-driven lifecycle for the presenter: create, pause, resume and destroy, that can be called from the activity. By default it's tied to the onXXX methods but that's just because I have 1 Ui per screen. In cases like ViewPager I'd have to do it custom.",
    "edited": {
      "user": "U0B8R3VV4",
      "ts": "1444691521.000000"
    },
    "ts": "1444691173.000311",
    "id": "12li1973",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "now, on the presenter, there are two methods available: bindUntilPause and bindUntilDestroy, wich take a list of subscriptions and kill them when corresponding. So, my create and resume methods are a call to these with all the UX the presenter manages: handling click types, refresh policy, sensors or system changes. What each do is defined declaratively, and all the subscriptions are getUi().doThing() where doThing is something out of RxBinding or similar- So far I haven't found anything I can't express that way.",
    "edited": {
      "user": "U0B8R3VV4",
      "ts": "1444691477.000000"
    },
    "ts": "1444691309.000313",
    "id": "12li1974",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "I could literally substitute create and resume for an abstract method that returns the list of subscriptions and does the binding behind the scenes, but I want to still leave the option for imperative code in case of stuff like analytics tracking",
    "ts": "1444691386.000315",
    "id": "12li1975",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "although I could wrap the tracking in ActionX and use it the same way I do with the ui on doOnNext and such",
    "edited": {
      "user": "U0B8R3VV4",
      "ts": "1444691491.000000"
    },
    "ts": "1444691423.000317",
    "id": "12li1976",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U091EBYSU",
    "text": "Checked sources, LGTM. Btw please use lambdas + nullability annotations!",
    "ts": "1444691730.000322",
    "id": "12li1977",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "can't use lambdas",
    "ts": "1444691750.000323",
    "id": "12li1978",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "or won't, I don't trust bytecode changes for this",
    "ts": "1444691765.000324",
    "id": "12li1979",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "and I'm not allowed to anyway :stuck_out_tongue:",
    "ts": "1444691771.000325",
    "id": "12li1980",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U091EBYSU",
    "text": "But you use Lombok :simple_smile:",
    "ts": "1444691778.000326",
    "id": "12li1981",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "touché",
    "ts": "1444691785.000327",
    "id": "12li1982",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "still, only the easy parts of lombok, getter/setter and little more",
    "ts": "1444691801.000328",
    "id": "12li1983",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U091EBYSU",
    "text": "It does even worse bytecode magic",
    "ts": "1444691803.000329",
    "id": "12li1984",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "things that are delombokable, that's my limit",
    "ts": "1444691820.000330",
    "id": "12li1985",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "because that's what I do before going production",
    "ts": "1444691835.000331",
    "id": "12li1986",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "what should I annotate for nullability?",
    "ts": "1444691864.000332",
    "id": "12li1987",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U091EBYSU",
    "text": "And things are delambdable :simple_smile: But, okay. \n\nWe’re basically annotating everything with nullability annotations, helps a lot and makes contracts more clearer.",
    "ts": "1444691927.000333",
    "id": "12li1988",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "I suspect that's literally literally",
    "ts": "1444691954.000334",
    "id": "12li1989",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "thing is, I'm not very fond of nullable annotations because they're IDE bound",
    "ts": "1444691967.000335",
    "id": "12li1990",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U091EBYSU",
    "text": "Yep. Use Kotlin!",
    "ts": "1444691986.000336",
    "id": "12li1991",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "they still don't force dereferenciation like a ? type would in kotlin, right?",
    "ts": "1444691989.000337",
    "id": "12li1992",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "hah",
    "ts": "1444691997.000338",
    "id": "12li1993",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U091EBYSU",
    "text": "<@U0B8R3VV4>: sure they don’t, the only correct place for that is `javac`, but Java does not have standard nullability annotations :disappointed:",
    "ts": "1444692053.000339",
    "id": "12li1994",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "I'm changing jobs soon so it may happen. There's going to be a migration period, I'll need to see how a change would fit",
    "ts": "1444692084.000340",
    "id": "12li1995",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "yeah so you're better off with a lombok nullable annotation, failing early :stuck_out_tongue:",
    "ts": "1444692109.000341",
    "id": "12li1996",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "and failing hard",
    "ts": "1444692116.000342",
    "id": "12li1997",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "still, NPEs come the other side of the observable pipe",
    "edited": {
      "user": "U0B8R3VV4",
      "ts": "1444692140.000000"
    },
    "ts": "1444692127.000343",
    "id": "12li1998",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "on the presenter",
    "ts": "1444692134.000344",
    "id": "12li1999",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "my past project everything that's wrapped into observables looks like Observable.create(() -&gt; { try { //no fucks given } catch(Throwable t) { subscriber.onError() } })",
    "ts": "1444692262.000346",
    "id": "12li2000",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "with corresponding isUnsubscribed checks etc",
    "ts": "1444692272.000347",
    "id": "12li2001",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U091EBYSU",
    "text": ":simple_smile:",
    "ts": "1444692305.000348",
    "id": "12li2002",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "ui fails, logging reports, there's the RxLog you saw on that codebase that I could plug to any reporting system I want",
    "ts": "1444692328.000349",
    "id": "12li2003",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "errthing is easy because it's centralized",
    "edited": {
      "user": "U0B8R3VV4",
      "ts": "1444692347.000000"
    },
    "ts": "1444692332.000350",
    "id": "12li2004",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "problem is I lose line addresses depending on the logger backend, because all reports happen on the same method",
    "ts": "1444692374.000352",
    "id": "12li2005",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "which is not in context",
    "ts": "1444692390.000353",
    "id": "12li2006",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U091EBYSU",
    "text": "Btw, we’ve added a practice to crash debug builds on errors in log (I think I’ll do same for `warning` level soon).\n\nYeah, loosing code line is sad.",
    "ts": "1444692440.000354",
    "id": "12li2007",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "I would crash the app on that if it didn't take a hundred lifetimes to put it back up again",
    "ts": "1444692497.000355",
    "id": "12li2008",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "we have 2 factor authentication and no server mocks",
    "ts": "1444692508.000356",
    "id": "12li2009",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "you want to code in as much as you can before starting to test",
    "ts": "1444692525.000357",
    "id": "12li2010",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "and JRebel costs a shitton per year -.-",
    "ts": "1444692554.000358",
    "reactions": [
      {
        "name": "disappointed",
        "users": [
          "U091EBYSU"
        ],
        "count": 1
      }
    ],
    "id": "12li2011",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "<@U0B8R3VV4>: How would you setup RxLifecycle differently? If the API sucks we should make it not suck.",
    "ts": "1444693151.000359",
    "id": "12li2012",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "it doesn't suck",
    "ts": "1444693209.000360",
    "id": "12li2013",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "but it doesn't fit my needs either",
    "ts": "1444693216.000361",
    "id": "12li2014",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "What are those?",
    "ts": "1444693253.000362",
    "id": "12li2015",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "let me double check",
    "ts": "1444693350.000363",
    "id": "12li2016",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "but IIRC it was because I wanted more ingrain control over the lifecycle",
    "ts": "1444693363.000364",
    "id": "12li2017",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "For the record, I'm not saying everyone needs to use this.",
    "ts": "1444693367.000365",
    "id": "12li2018",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "you use your own activity with the lifecycle() method",
    "ts": "1444693376.000366",
    "id": "12li2019",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "But when someone says they're not using it because the API is bad, that's a fixable problem.",
    "ts": "1444693376.000367",
    "id": "12li2020",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "You *can* use the `RxActivity` but you don't need to.",
    "ts": "1444693410.000368",
    "id": "12li2021",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "It's technically composable, as far as anything is composable with regards to `Activity` and `Fragment`.",
    "ts": "1444693427.000369",
    "id": "12li2022",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "thing is, I would have to roll out my own lifecycle observable",
    "ts": "1444693516.000370",
    "id": "12li2023",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "based off whatever I wanted",
    "ts": "1444693546.000371",
    "id": "12li2024",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "even if it's just for testing purposes",
    "edited": {
      "user": "U0B8R3VV4",
      "ts": "1444693583.000000"
    },
    "ts": "1444693565.000372",
    "id": "12li2025",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U091EBYSU",
    "text": "<@U0543MFFP>: do you use MVP? We basically just don’t see need in such Reacting on a lifecycle events from Fragments/Activities with MVP.",
    "ts": "1444693575.000373",
    "reactions": [
      {
        "name": "+1",
        "users": [
          "U0B8R3VV4"
        ],
        "count": 1
      }
    ],
    "id": "12li2026",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U091EBYSU",
    "text": "Don’t want to say that MVP is perfect, though.",
    "ts": "1444693593.000375",
    "id": "12li2027",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "So the problem is that there's too much you have to make yourself, and the solution is to make it all yourself a different way (aka MVP)?",
    "ts": "1444693741.000376",
    "id": "12li2028",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "yeah",
    "ts": "1444693751.000377",
    "reactions": [
      {
        "name": "+1",
        "users": [
          "U091EBYSU"
        ],
        "count": 1
      }
    ],
    "id": "12li2029",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "I'm amused.",
    "ts": "1444693847.000378",
    "id": "12li2030",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "we're doing exactly the same",
    "ts": "1444693869.000379",
    "id": "12li2031",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "Yeah, that's the conclusion I came to looking at `ZimplBasePresenter`",
    "ts": "1444693878.000380",
    "id": "12li2032",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "BTW you should check out `CompositeSubscription`.",
    "ts": "1444693885.000381",
    "id": "12li2033",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "you have lifecycle subject calls on the activity",
    "ts": "1444693885.000382",
    "id": "12li2034",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "we have explicit presenter calls",
    "ts": "1444693893.000383",
    "id": "12li2035",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U091EBYSU",
    "text": "The less code &amp; logic we put/tight with `Activities`/`Fragments` — the better, easier to test and support the result. That’s why I and probably some others don’t see the need in RxLifecycle.",
    "ts": "1444693894.000384",
    "id": "12li2036",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "composite subscription is not reusable",
    "ts": "1444693908.000385",
    "id": "12li2037",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "Yes it is.",
    "ts": "1444693912.000386",
    "id": "12li2038",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "no it is not",
    "ts": "1444693916.000387",
    "id": "12li2039",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "Yes it is. :stuck_out_tongue:",
    "ts": "1444693920.000388",
    "id": "12li2040",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U091EBYSU",
    "text": "It’s reusable, but API is not obvious",
    "ts": "1444693926.000389",
    "id": "12li2041",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "to the manual!",
    "ts": "1444693928.000390",
    "id": "12li2042",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U091EBYSU",
    "text": "And it’s thread safe :simple_smile:",
    "ts": "1444693944.000391",
    "id": "12li2043",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "clear...",
    "ts": "1444693999.000392",
    "id": "12li2044",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "hmmmm",
    "ts": "1444694000.000393",
    "id": "12li2045",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "The documentation is actually totally wrong.",
    "ts": "1444694006.000394",
    "id": "12li2046",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "gonna go with teh option select and say that it's new",
    "ts": "1444694014.000395",
    "id": "12li2047",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U091EBYSU",
    "text": "As usual with Rx…",
    "ts": "1444694017.000396",
    "id": "12li2048",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "`clear()` claims it's unoperative after calling it but the code says the opposite.",
    "ts": "1444694023.000397",
    "id": "12li2049",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "<@U091EBYSU>: I agree with removing code from `Activity` or `Fragment` but I disagree with the way it's done.",
    "ts": "1444694077.000398",
    "id": "12li2050",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "I dream of reactive `Activity` and `Fragment`.",
    "ts": "1444694092.000399",
    "id": "12li2051",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "Presenters are a half-solution towards that end.",
    "ts": "1444694100.000400",
    "id": "12li2052",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "They cherry-pick what they find important in the lifecycle.",
    "ts": "1444694115.000401",
    "id": "12li2053",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U091EBYSU",
    "text": "Until `Acitivity` and `Fragment` full of mutable state — it’s hard to make them reactive.",
    "ts": "1444694134.000402",
    "id": "12li2054",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "Instead of a presenter I'd like to see `Observable&lt;Everything&gt;`",
    "ts": "1444694135.000403",
    "id": "12li2055",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U091EBYSU",
    "text": "Think about `Presenter` as more abstract `Activity` / `Fragment`",
    "ts": "1444694168.000404",
    "id": "12li2056",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "I do.",
    "ts": "1444694180.000405",
    "id": "12li2057",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U091EBYSU",
    "text": "And make your `Observable&lt;Everything&gt;` magic there and in the Model layer :simple_smile:",
    "ts": "1444694187.000406",
    "id": "12li2058",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "I think of observables as even more abstract.",
    "ts": "1444694189.000407",
    "reactions": [
      {
        "name": "+1",
        "users": [
          "U091EBYSU"
        ],
        "count": 1
      }
    ],
    "id": "12li2059",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "way I see it, Presenter is a bendy pìpe with how the info flows",
    "ts": "1444694189.000408",
    "id": "12li2060",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "it doesn't define how the info is presented, or touches any of the android nastiness",
    "ts": "1444694212.000409",
    "reactions": [
      {
        "name": "+1",
        "users": [
          "U091EBYSU"
        ],
        "count": 1
      }
    ],
    "id": "12li2061",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "move that out to the hellpit of activities, and put it as observable",
    "ts": "1444694226.000410",
    "id": "12li2062",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "If my dream comes true then I could go the presenter route ultimately, but I don't need to, and can still avoid the same coupling with the actual `Activity` or `Fragment`.",
    "ts": "1444694229.000411",
    "id": "12li2063",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "It's certainly tricky to get the API right though. Every day I tinker and sleep on it a bit more.",
    "ts": "1444694255.000412",
    "id": "12li2064",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "you won't, you'll reach method limit :open_mouth:",
    "ts": "1444694258.000413",
    "id": "12li2065",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U091EBYSU",
    "text": "It’s doable and it’s great goal.",
    "ts": "1444694259.000414",
    "id": "12li2066",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "<@U0B8R3VV4>: Don't worry, I don't work at Facebook or Google. :wink:",
    "ts": "1444694293.000415",
    "id": "12li2067",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "the other day I was joking about an annotation processor where you go to a view, @RxBind and you get all method access",
    "ts": "1444694312.000416",
    "id": "12li2068",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "but it only creates the methods you actually call or something similar",
    "ts": "1444694324.000417",
    "id": "12li2069",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U091EBYSU",
    "text": "// That moment when you think that you’ve realized that “everything is a stream”, then you realize “EVERYthing is a stream” and then again you realize “EVERYTHING is a stream\"",
    "ts": "1444694332.000418",
    "id": "12li2070",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "*that* would be fucking neat",
    "ts": "1444694332.000419",
    "id": "12li2071",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "My current plan is to make an Activity armed with listeners.",
    "ts": "1444694376.000420",
    "id": "12li2072",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "Then build a layer on top of that like RxBinding.",
    "ts": "1444694392.000421",
    "id": "12li2073",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "Then, yes, you would need a base `Activity` and `Fragment` and that sucks",
    "ts": "1444694402.000422",
    "id": "12li2074",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "<@U091EBYSU>: everything is a Lisp, as the ancients prophesized",
    "edited": {
      "user": "U0B8R3VV4",
      "ts": "1444694466.000000"
    },
    "ts": "1444694406.000423",
    "id": "12li2075",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "But then everyone's libs could actually get along from that base.",
    "ts": "1444694415.000424",
    "id": "12li2076",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "In order for it to work/be accepted it'd have to be right though.",
    "ts": "1444694425.000425",
    "id": "12li2077",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "but that's what we're already building, individually",
    "ts": "1444694426.000426",
    "id": "12li2078",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "Exactly!",
    "ts": "1444694430.000427",
    "id": "12li2079",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "check my activities, it's just that",
    "ts": "1444694432.000428",
    "id": "12li2080",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "It needs to be general enough that it'll work for anyone's libs",
    "ts": "1444694444.000429",
    "id": "12li2081",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "we just add what we need, and it's a buttload of boilerplate to write",
    "ts": "1444694446.000430",
    "id": "12li2082",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "But simultaneously tight enough that it's not a pain.",
    "ts": "1444694454.000431",
    "id": "12li2083",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "I'll have some samples out soon. I want to get thoughts on it.",
    "ts": "1444694475.000433",
    "id": "12li2084",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "sure, glad to help (if that's what you're asking)",
    "ts": "1444694540.000434",
    "id": "12li2085",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "I'm not asking anything. Just sharing dreams. :simple_smile:",
    "ts": "1444694551.000435",
    "id": "12li2086",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "my dream is that backend-senpai notices me and moves me away from this",
    "ts": "1444694600.000436",
    "id": "12li2087",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "My dream is that everyone plays Undertale.",
    "ts": "1444694616.000437",
    "reactions": [
      {
        "name": "+1",
        "users": [
          "U04U5KS3Z"
        ],
        "count": 1
      }
    ],
    "id": "12li2088",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U091EBYSU",
    "text": "<@U0543MFFP>: I have another, but related dream-idea in my mind for some time:\n\nImmutable UI.\n\nImagine you want to set `Toolbar` title,  `Toolbar` can have an immutable value class `Toolbar.Settings` which basicaly contains all `Toolbar` settings, and applying new `title` is just as easy as write `toolbar.settings().toBuilder().title(“new title”)` and then apply it to the `Toolbar`.",
    "ts": "1444694621.000438",
    "id": "12li2089",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "I'm joking, I could do anything, still haven't found what really scratches my itches",
    "ts": "1444694622.000439",
    "id": "12li2090",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U091EBYSU",
    "text": "With such immutability you can be reactive and async, and efficient too.",
    "ts": "1444694640.000440",
    "id": "12li2091",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0543MFFP",
    "text": "Anyways I gotta head out, good talking with y'all.",
    "ts": "1444694641.000441",
    "id": "12li2092",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "<@U091EBYSU>: react_native",
    "ts": "1444694642.000442",
    "id": "12li2093",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "or Racket",
    "ts": "1444694655.000443",
    "id": "12li2094",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0B8R3VV4",
    "text": "<@U0543MFFP>: byebye",
    "ts": "1444694666.000444",
    "id": "12li2095",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U091EBYSU",
    "text": "<@U0B8R3VV4>: hah, they’re similar, yes. Didn’t thought about them.",
    "edited": {
      "user": "U091EBYSU",
      "ts": "1444694735.000000"
    },
    "ts": "1444694706.000445",
    "id": "12li2096",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0C9FDT6J",
    "subtype": "channel_join",
    "text": "<@U0C9FDT6J|couis92> has joined the channel",
    "ts": "1444707872.000466",
    "id": "12li2097",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0C9FDT6J",
    "text": "hi all",
    "ts": "1444707877.000467",
    "id": "12li2098",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  }
]