[
  {
    "user": "U2LH8LJAJ",
    "text": "<@U2LH8LJAJ|retor> has joined the channel",
    "subtype": "channel_join",
    "ts": "1475825934.000473",
    "id": "07li7641",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U2LLM7VSA",
    "text": "<@U2LLM7VSA|kate.alisova> has joined the channel",
    "subtype": "channel_join",
    "ts": "1475846325.000474",
    "id": "07li7642",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U2LLP08RJ",
    "text": "<@U2LLP08RJ|andrewg> has joined the channel",
    "subtype": "channel_join",
    "ts": "1475847141.000475",
    "id": "07li7643",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U2LMHDQJ3",
    "text": "<@U2LMHDQJ3|jorge.sepulveda> has joined the channel",
    "subtype": "channel_join",
    "ts": "1475848888.000476",
    "id": "07li7644",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U2LNRGN81",
    "text": "<@U2LNRGN81|dshelby> has joined the channel",
    "subtype": "channel_join",
    "ts": "1475853518.000477",
    "id": "07li7645",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U2LPJRM98",
    "text": "<@U2LPJRM98|hilarymason> has joined the channel",
    "subtype": "channel_join",
    "ts": "1475855841.000478",
    "id": "07li7646",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U2LPDB4RL",
    "text": "<@U2LPDB4RL|laurencoon> has joined the channel",
    "subtype": "channel_join",
    "ts": "1475857042.000479",
    "id": "07li7647",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U2LQUS31D",
    "text": "<@U2LQUS31D|hali23> has joined the channel",
    "subtype": "channel_join",
    "ts": "1475861743.000480",
    "id": "07li7648",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U051EHW7M",
    "text": "Hey everyone, *v0.4-alpha* of _falkon_ is out! This version introduces reactive stream like <https://github.com/square/sqlbrite/>",
    "attachments": [
      {
        "service_name": "GitHub",
        "title": "square/sqlbrite",
        "title_link": "https://github.com/square/sqlbrite/",
        "text": "sqlbrite - A lightweight wrapper around SQLiteOpenHelper which introduces reactive stream semantics to SQL operations.",
        "fallback": "GitHub: square/sqlbrite",
        "thumb_url": "https://avatars0.githubusercontent.com/u/82592?v=3&s=400",
        "from_url": "https://github.com/square/sqlbrite/",
        "thumb_width": 234,
        "thumb_height": 234,
        "service_icon": "https://github.com/apple-touch-icon.png",
        "id": 1
      }
    ],
    "ts": "1475863459.000481",
    "reactions": [
      {
        "name": "upvote",
        "users": [
          "U0N7D6F50"
        ],
        "count": 1
      },
      {
        "name": "downvote",
        "users": [
          "U0N7D6F50"
        ],
        "count": 1
      }
    ],
    "id": "07li7649",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U0N7D6F50",
    "text": "",
    "bot_id": "B0N7DNUT0",
    "attachments": [
      {
        "fallback": "square/sqlbrite",
        "text": "SQLBrite\n========\n\nA lightweight wrapper around `SQLiteOpenHelper` and `ContentResolver` which introduces reactive\nstream semantics to queries.\n\n\n\nUsage\n-----\n\nCreate a `SqlBrite` instance which is an adapter for the library functionality.\n\n```java\nSqlBrite sqlBrite = SqlBrite.create();\n```\n\nPass a `SQLiteOpenHelper` instance and a `Scheduler` to create a `BriteDatabase`.\n\n```java\nBriteDatabase db = sqlBrite.wrapDatabaseHelper(openHelper, <http://Schedulers.io|Schedulers.io>());\n```\n\nA `Scheduler` is required for a few reasons, but the most important is that query notifications can\ntrigger on the thread of your choice. The query can then be run without blocking the main thread or\nthe thread which caused the trigger.\n\nThe `BriteDatabase.createQuery` method is similar to `SQLiteDatabase.rawQuery` except it takes an\nadditional parameter of table(s) on which to listen for changes. Subscribe to the returned\n`Observable&lt;Query&gt;` which will immediately notify with a `Query` to run.\n\n```java\nObservable&lt;Query&gt; users = db.createQuery(\"users\", \"SELECT * FROM users\");\nusers.subscribe(new Action1&lt;Query&gt;() {\n  @Override public void call(Query query) {\n    Cursor cursor = query.run();\n    // TODO parse data...\n  }\n});\n```\n\nUnlike a traditional `rawQuery`, updates to the specified table(s) will trigger additional\nnotifications for as long as you remain subscribed to the observable. This means that when you\ninsert, update, or delete data, any subscribed queries will update with the new data instantly.\n\n```java\nfinal AtomicInteger queries = new AtomicInteger();\nusers.subscribe(new Action1&lt;Query&gt;() {\n  @Override public void call(Query query) {\n    queries.getAndIncrement();\n  }\n});\nSystem.out.println(\"Queries: \" + queries.get()); // Prints 1\n\ndb.insert(\"users\", createUser(\"jw\", \"Jake Wharton\"));\ndb.insert(\"users\", createUser(\"mattp\", \"Matt Precious\"));\ndb.insert(\"users\", createUser(\"strong\", \"Alec Strong\"));\n\nSystem.out.println(\"Queries: \" + queries.get()); // Prints 4\n```\n\nIn the previous example we re-used the `BriteDatabase` object \"db\" for inserts. All insert, update,\nor delete operations must go through this object in order to correctly notify subscribers.\n\nUnsubscribe from the returned `Subscription` to stop getting updates.\n\n```java\nfinal AtomicInteger queries = new AtomicInteger();\nSubscription s = users.subscribe(new Action1&lt;Query&gt;() {\n  @Override public void call(Query query) {\n    queries.getAndIncrement();\n  }\n});\nSystem.out.println(\"Queries: \" + queries.get()); // Prints 1\n\ndb.insert(\"users\", createUser(\"jw\", \"Jake Wharton\"));\ndb.insert(\"users\", createUser(\"mattp\", \"Matt Precious\"));\ns.unsubscribe();\n\ndb.insert(\"users\", createUser(\"strong\", \"Alec Strong\"));\n\nSystem.out.println(\"Queries: \" + queries.get()); // Prints 3\n```\n\nUse transactions to prevent large changes to the data from spamming your subscribers.\n\n```java\nfinal AtomicInteger queries = new AtomicInteger();\nusers.subscribe(new Action1&lt;Query&gt;() {\n  @Override public void call(Query query) {\n    queries.getAndIncrement();\n  }\n});\nSystem.out.println(\"Queries: \" + queries.get()); // Prints 1\n\nTransaction transaction = db.newTransaction();\ntry {\n  db.insert(\"users\", createUser(\"jw\", \"Jake Wharton\"));\n  db.insert(\"users\", createUser(\"mattp\", \"Matt Precious\"));\n  db.insert(\"users\", createUser(\"strong\", \"Alec Strong\"));\n  transaction.markSuccessful();\n} finally {\n  transaction.end();\n}\n\nSystem.out.println(\"Queries: \" + queries.get()); // Prints 2\n```\n*Note: You can also use try-with-resources with a `Transaction` instance.*\n\nSince queries are just regular RxJava `Observable` objects, operators can also be used to\ncontrol the frequency of notifications to subscribers.\n\n```java\nusers.debounce(500, MILLISECONDS).subscribe(new Action1&lt;Query&gt;() {\n  @Override public void call(Query query) {\n    // TODO...\n  }\n});\n```\n\nThe `SqlBrite` object can also wrap a `ContentResolver` for observing a query on another app's\ncontent provider.\n\n```java\nBriteContentResolver resolver = sqlBrite.wrapContentProvider(contentResolver, <http://Schedulers.io|Schedulers.io>());\nObservable&lt;Query&gt; query = resolver.createQuery(/*...*/);\n```\n\nThe full power of RxJava's operators are available for combining, filtering, and triggering any\nnumber of queries and data changes.\n\n\n\nPhilosophy\n----------\n\nSqlBrite's only responsibility is to be a mechanism for coordinating and composing the notification\nof updates to tables such that you can update queries as soon as data changes.\n\nThis library is not an ORM. It is not a type-safe query mechanism. It won't serialize the same POJOs\nyou use for Gson. It's not going to perform database migrations for you.\n\nSome of these features are offered by [SQLDelight][sqldelight] which can be used with SQLBrite.\n\n\n\nDownload\n--------\n\n```groovy\ncompile 'com.squareup.sqlbrite:sqlbrite:0.7.0'\n```\n\nSnapshots of the development version are available in [Sonatype's `snapshots` repository][snap].\n\n\n\nLicense\n-------\n\n    Copyright 2015 Square, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       <http://www.apache.org/licenses/LICENSE-2.0>\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n\n\n\n\n [snap]: <https://oss.sonatype.org/content/repositories/snapshots/>\n [sqldelight]: <https://github.com/square/sqldelight/>\n",
        "title": "square/sqlbrite",
        "id": 1,
        "title_link": "https://github.com/square/sqlbrite",
        "color": "FFFFFF",
        "fields": [
          {
            "title": "Open issues",
            "value": "13",
            "short": true
          },
          {
            "title": "Languages",
            "value": "Java, Shell",
            "short": true
          },
          {
            "title": "Contributors",
            "value": "20",
            "short": true
          },
          {
            "title": "License",
            "value": "Apache License 2.0",
            "short": true
          },
          {
            "title": "Commits",
            "value": "176",
            "short": true
          },
          {
            "title": "Releases",
            "value": "9",
            "short": true
          },
          {
            "title": "Branches",
            "value": "3",
            "short": true
          }
        ],
        "mrkdwn_in": [
          "title",
          "text"
        ]
      }
    ],
    "ts": "1475863464.000483",
    "id": "07li7650",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U051EHW7M",
    "text": "Check it out &amp; as always feedback/issues/PRs are welcome <https://github.com/jayrave/falkon>",
    "attachments": [
      {
        "service_name": "GitHub",
        "title": "jayrave/falkon",
        "title_link": "https://github.com/jayrave/falkon",
        "text": "falkon - Clean &amp; simple API to talk with the database (for Android &amp; Kotlin)",
        "fallback": "GitHub: jayrave/falkon",
        "thumb_url": "https://avatars0.githubusercontent.com/u/3953470?v=3&s=400",
        "from_url": "https://github.com/jayrave/falkon",
        "thumb_width": 400,
        "thumb_height": 400,
        "service_icon": "https://github.com/apple-touch-icon.png",
        "id": 1
      }
    ],
    "ts": "1475863478.000484",
    "reactions": [
      {
        "name": "downvote",
        "users": [
          "U0N7D6F50"
        ],
        "count": 1
      },
      {
        "name": "upvote",
        "users": [
          "U0N7D6F50"
        ],
        "count": 1
      }
    ],
    "id": "07li7651",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U2LPU12AF",
    "text": "<@U2LPU12AF|john_krsk> has joined the channel",
    "subtype": "channel_join",
    "ts": "1475864896.000487",
    "id": "07li7652",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U2LSX6G7Q",
    "text": "<@U2LSX6G7Q|bardh.io> has joined the channel",
    "subtype": "channel_join",
    "ts": "1475872029.000488",
    "id": "07li7653",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U2LSLN1BM",
    "text": "<@U2LSLN1BM|anjalsaneen> has joined the channel",
    "subtype": "channel_join",
    "ts": "1475878855.000489",
    "id": "07li7654",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "subtype": "file_share",
    "text": "<@U2LSLN1BM|anjalsaneen> uploaded a file: <https://androidchat.slack.com/files/anjalsaneen/F2LUJ937H/cmlyig9.jpg|cmLYIG9.jpg> and commented: Hi mates,\n\nI am trying to implement a custom time picker in my app. I came across this awesome time picker in an app called alarm droid. Is there a similar library to implement this? or can someone help me with the implementation. Thanks in anticipation",
    "file": {
      "id": "F2LUJ937H",
      "created": 1475879844,
      "timestamp": 1475879844,
      "name": "cmLYIG9.jpg",
      "title": "cmLYIG9.jpg",
      "mimetype": "image/jpeg",
      "filetype": "jpg",
      "pretty_type": "JPEG",
      "user": "U2LSLN1BM",
      "editable": false,
      "size": 54964,
      "mode": "hosted",
      "is_external": false,
      "external_type": "",
      "is_public": true,
      "public_url_shared": false,
      "display_as_bot": false,
      "username": "",
      "url_private": "https://files.slack.com/files-pri/T04PLNDMP-F2LUJ937H/cmlyig9.jpg?t=xoxe-4802761737-135492341906-135492342354-a21523d532",
      "url_private_download": "https://files.slack.com/files-pri/T04PLNDMP-F2LUJ937H/download/cmlyig9.jpg?t=xoxe-4802761737-135492341906-135492342354-a21523d532",
      "thumb_64": "https://files.slack.com/files-tmb/T04PLNDMP-F2LUJ937H-05647356fc/cmlyig9_64.jpg?t=xoxe-4802761737-135492341906-135492342354-a21523d532",
      "thumb_80": "https://files.slack.com/files-tmb/T04PLNDMP-F2LUJ937H-05647356fc/cmlyig9_80.jpg?t=xoxe-4802761737-135492341906-135492342354-a21523d532",
      "thumb_360": "https://files.slack.com/files-tmb/T04PLNDMP-F2LUJ937H-05647356fc/cmlyig9_360.jpg?t=xoxe-4802761737-135492341906-135492342354-a21523d532",
      "thumb_360_w": 360,
      "thumb_360_h": 320,
      "thumb_480": "https://files.slack.com/files-tmb/T04PLNDMP-F2LUJ937H-05647356fc/cmlyig9_480.jpg?t=xoxe-4802761737-135492341906-135492342354-a21523d532",
      "thumb_480_w": 480,
      "thumb_480_h": 427,
      "thumb_160": "https://files.slack.com/files-tmb/T04PLNDMP-F2LUJ937H-05647356fc/cmlyig9_160.jpg?t=xoxe-4802761737-135492341906-135492342354-a21523d532",
      "image_exif_rotation": 1,
      "original_w": 660,
      "original_h": 587,
      "permalink": "https://androidchat.slack.com/files/anjalsaneen/F2LUJ937H/cmlyig9.jpg",
      "permalink_public": "https://slack-files.com/T04PLNDMP-F2LUJ937H-361128610e",
      "channels": [
        "C054ZUY2W"
      ],
      "groups": [

      ],
      "ims": [

      ],
      "comments_count": 1,
      "initial_comment": {
        "id": "Fc2LU7J3S4",
        "created": 1475879844,
        "timestamp": 1475879844,
        "user": "U2LSLN1BM",
        "is_intro": true,
        "comment": "Hi mates,\n\nI am trying to implement a custom time picker in my app. I came across this awesome time picker in an app called alarm droid. Is there a similar library to implement this? or can someone help me with the implementation. Thanks in anticipation",
        "channel": ""
      }
    },
    "user": "U2LSLN1BM",
    "upload": true,
    "display_as_bot": false,
    "username": "<@U2LSLN1BM|anjalsaneen>",
    "bot_id": null,
    "ts": "1475879846.000490",
    "id": "07li7655",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  },
  {
    "user": "U1NRECW3X",
    "text": "<@U2LSLN1BM>: there's quite a few if you dig for pickers but the usage should be straightforward. What do you need help with?",
    "ts": "1475906934.000491",
    "id": "07li7656",
    "thread": [
      {
        "position": "null",
        "number": 0
      }
    ],
    "label": [
      {
        "type": "null",
        "position": "null"
      }
    ]
  }
]